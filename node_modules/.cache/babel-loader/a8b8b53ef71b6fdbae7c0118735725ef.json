{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let name = \"DiceWarNFT\";\n      let totalSupply = await store.getState().blockchain.smartContract.methods.maxSupply().call();\n      let cost = await store.getState().blockchain.smartContract.methods.maticPrice().call();\n      let presaleCost = await store.getState().blockchain.smartContract.methods.maticPreSalePrice().call();\n      let mintedTokens = await store.getState().blockchain.smartContract.methods.mintedTokens().call();\n      let newDwtPrice = await store.getState().blockchain.smartContract.methods.newDwtMintPrice().call();\n      dispatch(fetchDataSuccess({\n        name,\n        totalSupply,\n        cost,\n        mintedTokens,\n        presaleCost,\n        newDwtPrice\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"sources":["E:/work/DiceWarMint/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","name","totalSupply","getState","blockchain","smartContract","methods","maxSupply","call","cost","maticPrice","presaleCost","maticPreSalePrice","mintedTokens","newDwtPrice","newDwtMintPrice","err","console","log"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAIC,OAAD,IAAa;AACpC,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,UAAIQ,IAAI,GAAG,YAAX;AACA,UAAIC,WAAW,GAAG,MAAMV,KAAK,CAC1BW,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYC,SAFZ,GAGrBC,IAHqB,EAAxB;AAIA,UAAIC,IAAI,GAAG,MAAMjB,KAAK,CACnBW,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBI,UAFnB,GAGdF,IAHc,EAAjB;AAIA,UAAIG,WAAW,GAAG,MAAMnB,KAAK,CAC1BW,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYM,iBAFZ,GAGrBJ,IAHqB,EAAxB;AAIA,UAAIK,YAAY,GAAG,MAAMrB,KAAK,CAC3BW,QADsB,GAEtBC,UAFsB,CAEXC,aAFW,CAEGC,OAFH,CAEWO,YAFX,GAGtBL,IAHsB,EAAzB;AAIA,UAAIM,WAAW,GAAG,MAAMtB,KAAK,CAC1BW,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYS,eAFZ,GAGrBP,IAHqB,EAAxB;AAKAR,MAAAA,QAAQ,CACNL,gBAAgB,CAAC;AACfM,QAAAA,IADe;AAEfC,QAAAA,WAFe;AAGfO,QAAAA,IAHe;AAIfI,QAAAA,YAJe;AAKfF,QAAAA,WALe;AAMfG,QAAAA;AANe,OAAD,CADV,CAAR;AAUD,KAjCD,CAiCE,OAAOE,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAhB,MAAAA,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GAvCD;AAwCD,CAzCM","sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = \"DiceWarNFT\";\n      let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.maxSupply()\n        .call();\n      let cost = await store\n        .getState()\n        .blockchain.smartContract.methods.maticPrice()\n        .call();\n      let presaleCost = await store\n        .getState()\n        .blockchain.smartContract.methods.maticPreSalePrice()\n        .call();\n      let mintedTokens = await store\n        .getState()\n        .blockchain.smartContract.methods.mintedTokens()\n        .call();\n      let newDwtPrice = await store\n        .getState()\n        .blockchain.smartContract.methods.newDwtMintPrice()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          name,\n          totalSupply,\n          cost,\n          mintedTokens,\n          presaleCost,\n          newDwtPrice\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}