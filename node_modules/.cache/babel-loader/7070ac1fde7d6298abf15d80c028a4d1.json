{"ast":null,"code":"import _regeneratorRuntime from\"E:/work/DiceWarMint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/work/DiceWarMint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// constants\nimport Web3EthContract from\"web3-eth-contract\";import Web3 from\"web3\";import SmartContract from\"../../contracts/PNS.json\";// log\nimport{fetchData}from\"../data/dataActions\";var connectRequest=function connectRequest(){return{type:\"CONNECTION_REQUEST\"};};var connectSuccess=function connectSuccess(payload){return{type:\"CONNECTION_SUCCESS\",payload:payload};};var connectFailed=function connectFailed(payload){return{type:\"CONNECTION_FAILED\",payload:payload};};var updateAccountRequest=function updateAccountRequest(payload){return{type:\"UPDATE_ACCOUNT\",payload:payload};};export var connect=function connect(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var _window,ethereum,metamaskIsInstalled,web3,accounts,networkId,SmartContractObj,_SmartContractObj,_SmartContractObj2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(connectRequest());_window=window,ethereum=_window.ethereum;metamaskIsInstalled=ethereum&&ethereum.isMetaMask;if(!metamaskIsInstalled){_context.next=21;break;}Web3EthContract.setProvider(ethereum);web3=new Web3(ethereum);_context.prev=6;_context.next=9;return ethereum.request({method:\"eth_requestAccounts\"});case 9:accounts=_context.sent;_context.next=12;return ethereum.request({method:\"net_version\"});case 12:networkId=_context.sent;// const NetworkData = await SmartContract.networks[networkId];\nif(networkId===\"137\"){SmartContractObj=new Web3EthContract(SmartContract,\"0x868DA9CB3cF4163A415Da5Cd6F8CdcBD9eC0D460\");dispatch(connectSuccess({account:accounts[0],smartContract:SmartContractObj,web3:web3}));// Add listeners start\nethereum.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});ethereum.on(\"chainChanged\",function(){window.location.reload();});// Add listeners end\n}else if(networkId===\"4\"){//rinkeby contract\n//dispatch(connectFailed(\"Change network to Polygon.\"));\n_SmartContractObj=new Web3EthContract(SmartContract,//\"0xc1468aC4B85d6A3b8812802f0E30B4DE9946f044\"\n\"0x3813bf4Bd924A5ec9F8e264D12cfa76815d8Bb75\");dispatch(connectSuccess({account:accounts[0],smartContract:_SmartContractObj,web3:web3}));// Add listeners start\nethereum.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});ethereum.on(\"chainChanged\",function(){window.location.reload();});}else{//staging contract\n//dispatch(connectFailed(\"Change network to Polygon.\"));\n_SmartContractObj2=new Web3EthContract(SmartContract,\"0x557d27eB655EB6021496B43E8B697e7F14Ea005b\");dispatch(connectSuccess({account:accounts[0],smartContract:_SmartContractObj2,web3:web3}));// Add listeners start\nethereum.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});ethereum.on(\"chainChanged\",function(){window.location.reload();});}_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](6);dispatch(connectFailed(\"Something went wrong.\"));case 19:_context.next=22;break;case 21:dispatch(connectFailed(\"Install Metamask.\"));case 22:case\"end\":return _context.stop();}}},_callee,null,[[6,16]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateAccount=function updateAccount(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(updateAccountRequest({account:account}));dispatch(fetchData(account));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["E:/work/DiceWarMint/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","SmartContract","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","window","ethereum","metamaskIsInstalled","isMetaMask","setProvider","web3","request","method","accounts","networkId","SmartContractObj","account","smartContract","on","updateAccount","location","reload"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport SmartContract from \"../../contracts/PNS.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        // const NetworkData = await SmartContract.networks[networkId];\n        if (networkId === \"137\") {\n          const SmartContractObj = new Web3EthContract(\n            SmartContract,\n            \"0x868DA9CB3cF4163A415Da5Cd6F8CdcBD9eC0D460\"\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else if (networkId === \"4\") { //rinkeby contract\n          //dispatch(connectFailed(\"Change network to Polygon.\"));\n          const SmartContractObj = new Web3EthContract(\n            SmartContract,\n            //\"0xc1468aC4B85d6A3b8812802f0E30B4DE9946f044\"\n            \"0x3813bf4Bd924A5ec9F8e264D12cfa76815d8Bb75\"\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n        } else { //staging contract\n          //dispatch(connectFailed(\"Change network to Polygon.\"));\n          const SmartContractObj = new Web3EthContract(\n            SmartContract,\n            \"0x557d27eB655EB6021496B43E8B697e7F14Ea005b\"\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}