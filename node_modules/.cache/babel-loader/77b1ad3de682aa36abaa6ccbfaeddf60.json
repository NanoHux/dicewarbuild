{"ast":null,"code":"import _regeneratorRuntime from\"E:/work/DiceWarMint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/work/DiceWarMint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// log\nimport store from\"../store\";var fetchDataRequest=function fetchDataRequest(){return{type:\"CHECK_DATA_REQUEST\"};};var fetchDataSuccess=function fetchDataSuccess(payload){return{type:\"CHECK_DATA_SUCCESS\",payload:payload};};var fetchDataFailed=function fetchDataFailed(payload){return{type:\"CHECK_DATA_FAILED\",payload:payload};};export var fetchData=function fetchData(account){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var name,totalSupply,cost,presaleCost,mintedTokens,newDwtPrice;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(fetchDataRequest());_context.prev=1;name=\"DiceWarNFT\";_context.next=5;return store.getState().blockchain.smartContract.methods.maxSupply().call();case 5:totalSupply=_context.sent;_context.next=8;return store.getState().blockchain.smartContract.methods.maticPrice().call();case 8:cost=_context.sent;_context.next=11;return store.getState().blockchain.smartContract.methods.maticPreSalePrice().call();case 11:presaleCost=_context.sent;_context.next=14;return store.getState().blockchain.smartContract.methods.mintedTokens().call();case 14:mintedTokens=_context.sent;_context.next=17;return store.getState().blockchain.smartContract.methods.newDwtMintPrice().call();case 17:newDwtPrice=_context.sent;dispatch(fetchDataSuccess({name:name,totalSupply:totalSupply,cost:cost,mintedTokens:mintedTokens,presaleCost:presaleCost,newDwtPrice:newDwtPrice}));_context.next=25;break;case 21:_context.prev=21;_context.t0=_context[\"catch\"](1);console.log(_context.t0);dispatch(fetchDataFailed(\"Could not load data from contract.\"));case 25:case\"end\":return _context.stop();}}},_callee,null,[[1,21]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["E:/work/DiceWarMint/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","name","getState","blockchain","smartContract","methods","maxSupply","call","totalSupply","maticPrice","cost","maticPreSalePrice","presaleCost","mintedTokens","newDwtMintPrice","newDwtPrice","console","log"],"mappings":"iRAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,MAAO,CACLC,IAAI,CAAE,oBADD,CAAP,CAGD,CAJD,CAMA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAa,CACpC,MAAO,CACLF,IAAI,CAAE,oBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACD,OAAD,CAAa,CACnC,MAAO,CACLF,IAAI,CAAE,mBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,OAAD,CAAa,CACpC,+FAAO,iBAAOC,QAAP,iLACLA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR,CADK,gBAGCQ,IAHD,CAGQ,YAHR,uBAIqBT,CAAAA,KAAK,CAC1BU,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYC,SAFZ,GAGrBC,IAHqB,EAJrB,QAICC,WAJD,qCAQchB,CAAAA,KAAK,CACnBU,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBI,UAFnB,GAGdF,IAHc,EARd,QAQCG,IARD,sCAYqBlB,CAAAA,KAAK,CAC1BU,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYM,iBAFZ,GAGrBJ,IAHqB,EAZrB,SAYCK,WAZD,sCAgBsBpB,CAAAA,KAAK,CAC3BU,QADsB,GAEtBC,UAFsB,CAEXC,aAFW,CAEGC,OAFH,CAEWQ,YAFX,GAGtBN,IAHsB,EAhBtB,SAgBCM,YAhBD,sCAoBqBrB,CAAAA,KAAK,CAC1BU,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYS,eAFZ,GAGrBP,IAHqB,EApBrB,SAoBCQ,WApBD,eAyBHf,QAAQ,CACNL,gBAAgB,CAAC,CACfM,IAAI,CAAJA,IADe,CAEfO,WAAW,CAAXA,WAFe,CAGfE,IAAI,CAAJA,IAHe,CAIfG,YAAY,CAAZA,YAJe,CAKfD,WAAW,CAAXA,WALe,CAMfG,WAAW,CAAXA,WANe,CAAD,CADV,CAAR,CAzBG,iFAoCHC,OAAO,CAACC,GAAR,cACAjB,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR,CArCG,qEAAP,+DAwCD,CAzCM","sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = \"DiceWarNFT\";\n      let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.maxSupply()\n        .call();\n      let cost = await store\n        .getState()\n        .blockchain.smartContract.methods.maticPrice()\n        .call();\n      let presaleCost = await store\n        .getState()\n        .blockchain.smartContract.methods.maticPreSalePrice()\n        .call();\n      let mintedTokens = await store\n        .getState()\n        .blockchain.smartContract.methods.mintedTokens()\n        .call();\n      let newDwtPrice = await store\n        .getState()\n        .blockchain.smartContract.methods.newDwtMintPrice()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          name,\n          totalSupply,\n          cost,\n          mintedTokens,\n          presaleCost,\n          newDwtPrice\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}